---
interface Props {
	href?: string;
	[key: string]: any;
}

const { href, ...rest } = Astro.props as Props;
---

{href ? (
	<a href={href} {...rest} class={rest.class}><span class="cta-content"><slot /></span><span class="cta-spinner" aria-hidden="true"></span><span class="cta-check" aria-hidden="true">✓</span></a>
) : (
	<button type="submit" {...rest} class={rest.class}><span class="cta-content"><slot /></span><span class="cta-spinner" aria-hidden="true"></span><span class="cta-check" aria-hidden="true">✓</span></button>
)}

<style>
	a, button {
		position: relative;
		display: inline-flex;
		align-items: center;
		justify-content: center;
		text-align: center;
		padding: 0.56em 2em;
		gap: 0.8em;
		color: var(--accent-text-over);
		text-decoration: none;
		line-height: 1.1;
		border-radius: 999rem;
		overflow: hidden;
		background: var(--gradient-accent-orange);
		box-shadow: var(--shadow-md);
		white-space: nowrap;
		border: 0;
		cursor: pointer;
		font: inherit;
	}

		/* Spinner */
		.cta-spinner {
			width: 1.2rem;
			height: 1.2rem;
			margin-left: 0.75rem;
			border-radius: 50%;
			border: 2px solid rgba(255,255,255,0.2);
			border-top-color: #ffffff;
			opacity: 0;
			transform: scale(0.8) translateZ(0);
			transition: opacity .2s ease, transform .2s ease;
			will-change: transform;
		}

		.loading .cta-spinner { 
			opacity: 1; 
			transform: scale(1) translateZ(0); 
			animation: spin .7s linear infinite; 
		}

		.loading .cta-content { 
			opacity: 0.7; 
		}

		@keyframes spin { 
			from { transform: rotate(0deg); }
			to { transform: rotate(360deg); } 
		}

		/* Check animation */
		.cta-check {
			position: absolute;
			right: 1.5em;
			opacity: 0;
			color: #ffffff;
			font-size: 1.2rem;
			transform: scale(0.5) translateY(0.5em);
			transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
			font-weight: 900;
			pointer-events: none;
		}

		.success .cta-check { 
			opacity: 1; 
			transform: scale(1) translateY(0);
		}

		/* Disabled state */
		button:disabled,
		a.disabled {
			opacity: 0.7;
			cursor: not-allowed;
			pointer-events: none;
		}

	@media (min-width: 20em) {
		a, button { font-size: var(--text-lg); }
	}

	/* Overlay for hover effects. */
	a::after,
	button::after {
		content: '';
		position: absolute;
		inset: 0;
		pointer-events: none;
		transition: background-color var(--theme-transition);
		mix-blend-mode: overlay;
	}

	a:focus::after, a:hover::after,
	button:focus::after, button:hover::after {
		background-color: hsla(var(--gray-999-basis), 0.3);
	}

	@media (min-width: 50em) {
		a, button { padding: 1.125rem 2.5rem; font-size: var(--text-xl); }
	}
</style>
